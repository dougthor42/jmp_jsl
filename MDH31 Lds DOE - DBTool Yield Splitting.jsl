/*
---------------------------------------------
MDH31 Lds DOE - DBTool Yield Splitting.jsl

Created by D. Thor on 2014-06-04

Usage:
Edit the 'lot_name' string to query different lots.

Description:
Script will pull the "50_devices.csv" file (generated by DBTool) for each wafer in a user-specified lot. It will then split out the DUT names (A, B, C, etc.) and generate a yield summary for each DUT: how many die passed vs how many were tested.
---------------------------------------------
*/

Names Default To Here(1);

// ------------------------------------------------------
// ------------------------------------------------------
// Edit this to find different lots
// Seperate multiple lots with a single comma ','
// Example: "1433-1,1433-1.1"
lot_name = "1439-7";
// ------------------------------------------------------
// ------------------------------------------------------

/*
Old Method of getting Lot ID and whatnot. New method used Pick File

// Prompt user for Lot IDs
lot_window_dialog =	New Window(
	"Enter the Lot ID:",
	<< Modal,
	Text Box("Enter the Lot ID:"),
	lot_name_box = Text Edit Box( lot_name ),
	Button Box( "OK" ),
	Button Box( "Cancel" )
);
If( lot_window_dialog["Button"] == -1,
	Throw()
);

// Get the text from the lot_name box
//lot_list = Munger(lot_name_box << Get Text, 0, ",", "' OR tbl_test.LotNum = '");
lot_ID = lot_name_box << Get Text;

Show(lot_ID);
*/

// Determine what growth IDs are available by going through the lot
// folder, looking for growth folders with "50_devices.csv" files in them.

ROOT_PATH = "Z:\Power\AP Data\MDH31";
//ROOT_PATH = "C:\Temp\MDH31";
files = Files In Directory(ROOT_PATH);
Show(files);

file = Pick File(
	"prompt",
	ROOT_PATH,
	{"All_Die Files|csv"}
);
Show(file);

/*
Old Method again. New method use Pick File, above.

// Prompte the user to choose a growth ID
growth_window_dialog =	New Window(
	"Select the Growth ID:",
	<< Modal,
	Text Box("Select the Growth ID:"),
	growth_input_box = Combo Box( {"1", "2", "3"} ),
	Button Box( "OK" ),
	Button Box( "Cancel" )
);

growth_ID = growth_input_box << Get Selected;
Show(growth_ID);
*/


dt_raw_yield = Open(
	file,
	columns(
		lot = Character,
		wafer = Character,
		testnum = Numeric,
		dev = Character,
		row = Numeric,
		col = Numeric,
		state = Character,
		visualdefect = Character
	),
	Import Settings(
		End Of Line( CRLF, CR, LF ),
		End Of Field( Comma ),
		Strip Quotes( 0 ),
		Use Apostrophe as Quotation Mark( 0 ),
		Scan Whole File( 1 ),
		Treat empty columns as numeric( 0 ),
		Labels( 1 ),
		Column Names Start( 1 ),
		Data Starts( 2 ),
		Lines To Read( All ),
		Year Rule( "20xx" )
	),
	Output Table( "Raw Yield Data" )
);

// Rename the dev column to DUT
Column( "dev" ) << Set Name("DUT") << dt_raw_yield;

// Create a new column for State - the current column might have "Good" and "Good-Edge" which we need to account for.
col_state = dt_raw_yield << New Column( "Pass" );
col_state << Set Formula(
	If(
		:state == "Good" |
		:state == "Good_Edge" |
		:state == "Good-Edge Removed",
		1, 0)
);

dt_raw_yield << Run Formulas;

// Determine the yield and yield categories by creating a summary table
dt_raw_yield << Summary(
	Group(
		:lot,
		:wafer,
		:DUT
	),
	Sum( :Pass ),
	Output Table( "Yield" ),
	Link to original data table( 0 )
);
dtYield = Data Table( "Yield" );

// Create Yield column
col_yield = dtYield << New Column( "Yield (%)" );
col_yield << Set Formula(
	(:Name("Sum(Pass)") / :N Rows) * 100
);
dtYield << Run Formulas;

Close(dt_raw_yield, NoSave);